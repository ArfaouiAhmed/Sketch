{"version":3,"sources":["serviceWorker.js","components/FlexRow.js","components/FlexColumn.js","components/TypedText.js","components/NesContainer.js","components/AppText.js","components/Result.js","components/Score.js","components/Canvas.js","helpers.js","components/Controls.js","components/Round.js","components/Timer.js","components/Game.js","App.js","components/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","FlexRow","children","style","display","flexFlow","Column","size","flex","flexBasis","TypedText","text","useEffect","options","strings","typeSpeed","typed","Typed","destroy","id","NesContainer","className","classNames","this","props","title","dark","React","getAppropriateText","gameStatus","textElement","AppTexts","find","o","status","length","homeBtnStyle","position","left","top","tryBtnStyle","resultContainer","height","Result","useContext","GameContext","resetRounds","score","dispatch","resetGamingText","finalText","replace","to","type","onClick","scoreReducer","scoreState","action","Canvas","forwardRef","ref","lastX","lastY","mouseDown","canvas","current","context","getContext","fillStyle","fillRect","width","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","y","clientY","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","getPrediction","theCanvas","model","tensor","tf","fromPixels","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","prediction","a","clearBtnStyle","predictBtnStyle","Controls","currentRound","nextRound","labels","failureText","sucessText","useState","setPrediction","RoundContext","seconds","resetTimer","history","useHistory","console","log","push","createContext","Round","setSeconds","setInterval","clearInterval","useTimer","timer","Provider","value","Game","gamingtext","process","require","createRef","App","setCurrentRound","useRounds","useReducer","gtext","setGtext","useGamingText","Home","ReactDOM","render","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.562b2a82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nexport default function FlexRow({ children }) {\r\n    return (\r\n        <div style={{ display: \"flex\", flexFlow: \"row nowrap\" }}>{children}</div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function Column({ children, size = 1 }) {\r\n    return <div style={{ flex: size, flexBasis: '0%' }}>{children}</div>;\r\n}","import React, {useEffect} from 'react';\nimport Typed from 'typed.js';\n\n// Component to display an TypedText\n\nconst TypedText = ({text}) => {\n    useEffect(() => {\n\n        // Options for the Typed object\n        const options = {\n            strings: [text],\n            typeSpeed: 50\n        };\n\n        // New Typed instance\n        const typed = new Typed('#TypedText', options);\n\n        // Destroy Typed instance on unmounting the component to prevent memory leaks\n        return () => {\n            typed.destroy();\n        };\n    }, [text]);\n\n    return (\n        <div>\n            <section id='TypedText'></section>\n        </div>);\n};\n\nexport {TypedText};","import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\nclass NesContainer extends React.Component {\r\n    render() {\r\n        return <section\r\n                className={classNames(this.props.className, \"nes-container\", {\r\n                    \"with-title\": this.props.title,\r\n                    \"is-dark\": this.props.dark\r\n                })}\r\n                style={this.props.style}\r\n            >\r\n                {this.props.title && <h2 className=\"title\">{this.props.title}</h2>}\r\n                {this.props.children}\r\n            </section>;\r\n    }\r\n}\r\n\r\nexport default NesContainer;","\n\nexport function getAppropriateText(gameStatus) {\n    let textElement = AppTexts.find(o => o.status === gameStatus);\n    if(textElement.text.length > 0){\n        return textElement.text;\n    }\n}\n\nconst AppTexts =[\n    {\n        status: \"gameStart\",\n        text: \"let's get started.\"\n    },\n    {\n        status: \"gameSuccess\",\n        text: \"You know, that was a damn \\nfine sketch!\"\n    },\n    {\n        status: \"gameFailure\",\n        text: \"Not good enough, but here's \\nan other chance.\"\n    },\n    {\n        status: \"gameEndSuccess\",\n        text: \"Very Good, you scores scoreValue points.\"\n    },\n    {\n        status: \"gameEndFailure\",\n        text: \"Womp,womp... Try harder next time,and\\nmaybe you'll score more than scoreValue points. \"\n    },\n    {\n        status: \"welcome\",\n        text: \"This game has been modeled-off Google`s <a href=\\\"https://quickdraw.withgoogle.com/\\\">Quick Draw!</a> game,\\n and uses a sampling from the Quick, Draw! <a href=\\\"https://github.com/googlecreativelab/quickdraw-dataset\\\">dataset</a>.\"\n    },{\n        status: \"toYouby\",\n        text: \"Brought to you by the EPFL extention School.\"\n    }\n\n];\n\n\n","import FlexRow from \"./FlexRow\";\nimport FlexColumn from \"./FlexColumn\";\nimport {TypedText} from \"./TypedText\";\nimport NesContainer from \"./NesContainer\";\nimport {getAppropriateText} from \"./AppText\";\nimport React, {useContext} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {GameContext} from \"../App\";\n\nconst homeBtnStyle = {\n    position: 'absolute',\n    left: '850px',\n    top: '15px'\n};\n\nconst tryBtnStyle = {\n    position: 'absolute',\n    left: '800px',\n    top: '70px'\n};\n\nconst resultContainer = {\n    height: '160px'\n};\n\n\nfunction Result() {\n    const { resetRounds ,score ,dispatch, resetGamingText} = useContext(GameContext);\n    let resultText = score > 8 ?  \"gameEndSuccess\" :  \"gameEndFailure\";\n    let finalText = getAppropriateText(resultText).replace(\"scoreValue\", score);\n\n    return (\n        <NesContainer style={resultContainer} title={\"Sketch!\"} dark >\n            <FlexRow>\n                <FlexColumn>\n                    <TypedText text={finalText}/>\n                </FlexColumn>\n                <FlexColumn>\n                    <FlexRow>\n                        &nbsp;\n                    </FlexRow>\n                    <FlexRow>\n                        <Link to=\"/\">\n                            <button type=\"button\"\n                                    style={homeBtnStyle}\n                                    className=\"nes-btn\">\n                                Home\n                            </button>\n                        </Link>\n                        <Link to=\"/game\">\n                            <button\n                                className=\"nes-btn is-warning\"\n                                style={tryBtnStyle}\n                                onClick={() => {\n                                    resetRounds();\n                                    resetGamingText();\n                                    dispatch({type: \"reset\"});\n                                }}>\n                                Try Again.\n                            </button>\n                        </Link>\n                    </FlexRow>\n                </FlexColumn>\n            </FlexRow>\n        </NesContainer>\n    );\n}\n\nexport {Result};","\nexport function scoreReducer(scoreState, action) {\n    switch (action.type) {\n        case \"reset\":\n            return 0;\n        case \"one\":\n            return scoreState + 1;\n        case \"two\":\n            return scoreState + 2;\n        default:\n            return scoreState;\n    }\n}\n","import React, {useEffect} from \"react\";\n\n\nconst Canvas = React.forwardRef((props, ref) => {\n    let mouseDown = false;\n    let lastX;\n    let lastY;\n\n    function drawLine(canvas, x, y, lastX, lastY) {\n        let context = canvas.getContext(\"2d\");\n\n        context.strokeStyle = \"#000000\";\n        context.lineWidth = 12;\n        context.lineJoin = \"round\";\n\n        context.beginPath();\n        context.moveTo(lastX, lastY);\n        context.lineTo(x, y);\n        context.closePath();\n        context.stroke();\n\n        return [x, y];\n    }\n\n    const handleMouseup = () => {\n        mouseDown = false;\n        [lastX, lastY] = [undefined, undefined];\n    };\n\n    const handleMousemove = e => {\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        if (mouseDown) {\n            [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n        }\n    };\n\n    useEffect(() => {\n        const canvas = ref.current;\n        const context = canvas.getContext(\"2d\");\n\n        context.fillStyle = \"#ffffff\";\n        context.fillRect(0, 0, canvas.height, canvas.width);\n    });\n\n    return (\n        <canvas\n            height={300}\n            width={300}\n            ref={ref}\n            onMouseDown={() => (mouseDown = true)}\n            onMouseUp={handleMouseup}\n            onMouseMove={e => handleMousemove(e)}\n        />\n    );\n});\n\nexport { Canvas };","import * as tf from \"@tensorflow/tfjs\";\r\n\r\nfunction preprocessCanvas(canvas) {\r\n    // Preprocess image for the network\r\n    let tensor = tf\r\n        .browser\r\n        .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\r\n        .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\r\n        .mean(2) // Shape: (28, 28) - grayscale\r\n        .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\r\n        .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\r\n        .toFloat(); // Network works with floating points inputs\r\n    return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\r\n}\r\n\r\nexport function getPrediction(theCanvas, model) {\r\n    const tensor = preprocessCanvas(theCanvas);\r\n    return model\r\n        .then(loadedModel => loadedModel.predict(tensor).data())\r\n        .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\r\n}\r\n","import React, {useContext, useState} from \"react\";\nimport {getPrediction} from \"../helpers\";\nimport {useHistory} from \"react-router-dom\";\nimport {GameContext} from \"../App\";\nimport {RoundContext} from \"./Round\";\n\n\nconst clearBtnStyle = {\n    position: 'absolute',\n    left: '500px',\n    top: '300px'\n};\n\nconst predictBtnStyle = {\n    position: 'absolute',\n    left: '500px',\n    top: '250px'\n};\n\n\nfunction Controls() {\n    const {currentRound, nextRound, score, dispatch, ref, model, labels, failureText, sucessText} = useContext(GameContext);\n    const [prediction, setPrediction] = useState(\"\"); // Sets default label to empty string.\n    const {seconds, resetTimer} = useContext(RoundContext);\n    const history = useHistory();\n\n\n    function predict() {\n        console.log(\"Prediction: \" + prediction);\n        failureText();\n        getPrediction(ref, model).then(prediction => {\n                setPrediction(labels[prediction[0]]);\n                if (labels[prediction[0]] === labels[currentRound]) {\n                    sucessText();\n                    if (seconds < 10) {\n                        dispatch({type: \"one\"});\n                        console.log(\"+1\");\n                    } else {\n                        dispatch({type: \"two\"});\n                        console.log(\"+2\")\n                    }\n                }\n            }\n        )\n\n        nextRound();\n        resetTimer();\n        history.push(\"game\");\n    }\n\n\n    return (\n        <div>\n            {seconds > 0 ? <div>\n\n                    <button\n                        style={clearBtnStyle}\n                        className=\"nes-btn is-warning\"\n                        id=\"clear\"\n                        onClick={() => {\n                            const canvas = ref.current;\n                            const ctx = canvas.getContext(\"2d\");\n                            ctx.fillRect(0, 0, canvas.height, canvas.width);\n                        }}\n                    >\n                        Clear the canvas.\n                    </button>\n                    <button\n                        className=\"nes-btn is-warning\"\n                        style={predictBtnStyle}\n                        onClick={() => predict()}\n                        id=\"predict\"\n                    >\n                        Predict the drawing.\n                    </button>\n                    <div>\n                        your Score : {score}\n                    </div>\n                </div>\n                : predict()}\n        </div>\n    );\n}\n\nexport {Controls};","import React, {useEffect, useContext} from \"react\";\nimport {Controls} from \"./Controls\";\nimport {GameContext} from \"../App\";\nimport {useTimer} from \"./Timer\";\n\nconst RoundContext = React.createContext({});\n\nfunction Round() {\n    const {currentRound, labels} = useContext(GameContext);\n    const [timer, seconds, resetTimer] = useTimer();\n\n    useEffect(() => {\n        return () => clearInterval(timer);\n    }, [currentRound, labels, timer]);\n\n    return (\n            <div>\n                you have {seconds} to draw {labels[currentRound]}\n                <RoundContext.Provider value={{\n                    seconds: seconds,\n                    resetTimer: resetTimer\n                }}>\n                    <Controls/>\n                </RoundContext.Provider>\n            </div>\n    );\n}\n\nexport {Round, RoundContext};","import { useState } from \"react\";\n\nexport function useTimer() {\n    const [seconds, setSeconds] = useState(20);\n\n    const interval = setInterval(() => {\n        if (seconds === 0) {\n            clearInterval();\n        } else {\n            setSeconds(seconds - 1);\n        }\n    }, 1000);\n\n    return [interval, seconds, () => setSeconds(20)];\n}","import {Link} from \"react-router-dom\";\nimport FlexRow from \"./FlexRow\";\nimport FlexColumn from \"./FlexColumn\";\nimport {Canvas} from \"./Canvas\";\nimport {getAppropriateText} from \"./AppText\";\nimport NesContainer from \"./NesContainer\";\nimport React, {useContext} from \"react\";\nimport {Round} from \"./Round\";\nimport {GameContext} from \"../App\";\nimport {TypedText} from \"./TypedText\";\n\n\nconst homeBtnStyle = {\n    position: 'relative',\n    left: '850px',\n    top: '-20px'\n};\n\nfunction Game() {\n    const {currentRound, ref, labels, gamingtext} = useContext(GameContext);\n\n    return(\n        <NesContainer title={\"Sketch! - Round \" + (currentRound + 1) + \" of \" + labels.length} dark>\n            <div>\n                <Link to=\"/\">\n                    <button type=\"button\"\n                            style={homeBtnStyle}\n                            className=\"nes-btn\">\n                        Home\n                    </button>\n                </Link>\n            </div>\n            <FlexRow>\n                <FlexColumn>\n                    <Canvas ref={ref}/>\n                </FlexColumn>\n                <FlexColumn>\n                    <FlexRow>\n                        <TypedText text={getAppropriateText(gamingtext)} />\n                    </FlexRow>\n                    <FlexRow>\n\n                    </FlexRow>\n                    <FlexRow>\n                        &nbsp;\n                    </FlexRow>\n                    <FlexRow>\n                        <Round/>\n                    </FlexRow>\n                </FlexColumn>\n            </FlexRow>\n        </NesContainer>\n    );\n\n}\n\nexport {Game}","import React, {useReducer, useState} from \"react\";\nimport {Result} from \"./components/Result\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport {scoreReducer} from \"./components/Score\";\nimport {Game} from \"./components/Game\";\n\nconst model = tf.loadLayersModel(process.env.PUBLIC_URL + \"/model/model.json\");\nconst labels = require(\"./labels.json\");\nlet ref = React.createRef();\n\nconst GameContext = React.createContext();\n\nfunction useRounds(labels) {\n    let [currentRound, setCurrentRound] = useState(0);\n    return [currentRound, setCurrentRound, () => setCurrentRound(currentRound + 1), () => setCurrentRound(0)];\n}\n\nfunction useGamingText(){\n    const [gtext, setGtext] = useState(\"gameStart\");\n    return [gtext,() => setGtext(\"gameFailure\"),() => setGtext(\"gameSuccess\"),() => setGtext(\"gameStart\")]\n}\n\nfunction App() {\n\n    const [currentRound, setCurrentRound, nextRound, resetRounds] = useRounds();\n    const [score, dispatch] = useReducer(scoreReducer, 0);\n    const [gamingtext, failureText, sucessText, resetGamingText] = useGamingText();\n\n    return (\n        <GameContext.Provider value={{\n            currentRound: currentRound,\n            setCurrentRound: setCurrentRound,\n            nextRound: nextRound,\n            resetRounds: resetRounds,\n            score: score,\n            dispatch: dispatch,\n            ref: ref,\n            model: model,\n            labels: labels,\n            gamingtext: gamingtext,\n            failureText: failureText,\n            sucessText: sucessText,\n            resetGamingText: resetGamingText\n        }}>\n            {currentRound > 9 ? <Result/> : <Game/>}\n        </GameContext.Provider>\n    );\n}\n\n\nexport {App, GameContext};","import FlexRow from \"./FlexRow\";\nimport FlexColumn from \"./FlexColumn\";\nimport NesContainer from \"./NesContainer\";\nimport {getAppropriateText} from \"./AppText\";\nimport React from \"react\";\nimport {TypedText} from \"./TypedText\";\nimport { Link } from \"react-router-dom\";\n\n\nfunction Home() {\n\n\n    return (\n        <NesContainer dark >\n            <FlexColumn>\n                <h1>Sketch!</h1>\n                    <FlexRow>\n                        <TypedText text={getAppropriateText(\"welcome\")}/>\n                    </FlexRow>\n                    <FlexRow>\n                        &nbsp;\n                    </FlexRow>\n                    <FlexRow>\n                        { getAppropriateText(\"toYouby\") }\n                    </FlexRow>\n                    <FlexRow>\n                        &nbsp;\n                    </FlexRow>\n                <Link to=\"/game\">\n                <button type=\"button\"\n                        className=\"nes-btn\">\n                    Play game\n                </button>\n                </Link>\n            </FlexColumn>\n        </NesContainer>\n    );\n}\n\nexport {Home};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"nes.css/css/nes.min.css\";\nimport {App} from \"./App\";\nimport {Home} from \"./components/Home\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/\">\n                <Home/>\n            </Route>\n            <Route path=\"/game\">\n                <App/>\n            </Route>\n        </Switch>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}